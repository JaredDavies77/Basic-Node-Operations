Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

- Sort takes all the lines in the document or input and puts them in alphabetical order. In commands.js it based everything off of the first letter of each line and so on to determine the alphabetical order.

 }
      },
     //we will add the functionality of echo next within the object commandLibrary    
     break;
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
    "cat": function(fullPath) {
    "echo": function(userInput) {
    "head": function(fullPath) {
    case "cat":
    case "echo":
    case "head":
    case "tail":
    default:
    },
    },
    };
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
   }
  //parses the user input to understand which command was typed
 const commandLibrary = {
 function done(output) {
 function evaluateCmd(userInput) {
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;
 }
 }
//where we will store our commands
//where we will store the logic of our commands
//write out data
const fs = require("fs");

- Wc takes the entire document or input and tells you how many lines, words, and characters. The output was three numbers. 

 65     179    1936 commands.js

- Uniq prints all of the lines of the document or input and removes all the duplicate lines so that only unique lines in the file are left in the output. 

const fs = require("fs");

//write out data
 function done(output) {
     process.stdout.write(output);
     process.stdout.write('\nprompt > ');
 }

//where we will store our commands
 function evaluateCmd(userInput) {
  //parses the user input to understand which command was typed
   const userInputArray = userInput.split(" ");
   const command = userInputArray[0];
   
   switch (command) {
    case "echo":
     //we will add the functionality of echo next within the object commandLibrary    
        commandLibrary.echo(userInputArray.slice(1).join(" "));
      break;
    case "cat":
        commandLibrary.cat(userInputArray.slice(1));
      break;
    case "head":
        commandLibrary.head(userInputArray.slice(1)); 
     break;
    case "tail":
        commandLibrary.tail(userInputArray.slice(1));
      break; 
    default:
      done("Sorry that is not a valid operation. Valid operations are:\necho\ncat\nhead\ntail")
      break;
   }
 }
    
//where we will store the logic of our commands
 const commandLibrary = {
    "echo": function(userInput) {
        done(userInput);
    },
    "cat": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
            if (err) throw err;
            done(data);
        });
    },
    "head": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, "utf8", (err, data) => {
          if (err) throw err;
          output = data.toString().split("\n").slice(0,5).join("\n");
          done(output);
        });
      },
      "tail": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, "utf8", (err, data) => {
          if (err) throw err;
          output = data.toString().split("\n").slice(-5).join("\n");
          done(output);
        });
      }
    };

 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd

Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

- I did uniq commands.js | wc and the output was exactly the same as wc commands.js. This tells me that all my lines in commands.js are unique because it first removes any duplicate lines and then does the word line count, word count, and character count.

      65     179    1936


let arr = 'My name is Jared Davies!';


function reverseString(inputString) {
  var split = inputString.split(' '); 
  var reverse = [];
    for (let i=split.length-1; i>=0; i--){
      var word = split[i];
      for (let j=0; j<word.length; j++){
       reverse.unshift(word[j]);
      }
      reverse.unshift(' ');
    }
  reverse.shift();
  console.log(reverse.join(''));
}
  

reverseString(arr);